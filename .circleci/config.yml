# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference

#Previous Commands
#  terraform plan -out tfapply -var-file terraform.tfvars
#  terraform apply -auto-approve tfapply
#  terraform plan -destroy -out tfdestroy -var-file terraform.tfvars
#  terraform apply -auto-approve tfdestroy
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run:
          name: "Say hello"
          command: "echo Hello, World!"

  checkout-workspace:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout

  plan-apply-dev:
    working_directory: /tmp/project
    docker: 
      - image: 472821558027.dkr.ecr.us-east-1.amazonaws.com/ryan-container-repo:1.3.2
        aws_auth:
          aws_access_key_id: $ECR_AWS_ACCESS_KEY
          aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - run:
          name: terraform init & plan - dev
          command: |
            ls
            pwd
            cd ./.aws/dev
            ls
            pwd
            echo "Trying terraform init"
            terraform init -upgrade -input=false
            echo "terraform init successful"
            echo "Trying terraform plan"
            terraform plan -var-file terraform.tfvars
            echo "terraform plan successful"
      - persist_to_workspace:
          root: .
          paths:
            - .
  
  apply-dev:
    docker:
      - image: 472821558027.dkr.ecr.us-east-1.amazonaws.com/ryan-container-repo:1.3.2
        aws_auth:
          aws_access_key_id: $ECR_AWS_ACCESS_KEY
          aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform apply - dev
          command: |
            ls
            pwd
            cd ./.aws/dev
            ls
            pwd
            terraform apply -auto-approve
      - persist_to_workspace:
          root: .
          paths:
            - .

  plan-destroy-dev:
    working_directory: /tmp/project
    docker:
      - image: 472821558027.dkr.ecr.us-east-1.amazonaws.com/ryan-container-repo:1.3.2
        aws_auth:
          aws_access_key_id: $ECR_AWS_ACCESS_KEY
          aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - run:
          name: terraform create destroy plan - dev
          command: |
            ls
            pwd
            cd ./.aws/dev
            ls
            pwd
            echo "Trying terraform init"
            terraform init -upgrade -input=false
            echo "terraform init successful"
            echo "Trying terraform plan"
            terraform plan -destroy -var-file terraform.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - .

  destroy-dev:
    docker:
      - image: 472821558027.dkr.ecr.us-east-1.amazonaws.com/ryan-container-repo:1.3.2
        aws_auth:
          aws_access_key_id: $ECR_AWS_ACCESS_KEY
          aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy - dev
          command: |
            ls
            pwd
            cd ./.aws/dev
            ls
            pwd
            terraform destroy -auto-approve

  plan-apply-prod:
    working_directory: /tmp/project
    docker: 
      - image: 472821558027.dkr.ecr.us-east-1.amazonaws.com/ryan-container-repo:1.3.2
        aws_auth:
          aws_access_key_id: $ECR_AWS_ACCESS_KEY
          aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - run:
          name: terraform init & plan - prod
          command: |
            ls
            pwd
            cd ./.aws/prod
            ls
            pwd
            echo "Trying terraform init"
            terraform init -upgrade -input=false
            echo "terraform init successful"
            echo "Trying terraform plan"
            terraform plan -var-file terraform.tfvars
            echo "terraform plan successful"
      - persist_to_workspace:
          root: .
          paths:
            - .
  
  apply-prod:
    docker:
      - image: 472821558027.dkr.ecr.us-east-1.amazonaws.com/ryan-container-repo:1.3.2
        aws_auth:
          aws_access_key_id: $ECR_AWS_ACCESS_KEY
          aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform apply - prod
          command: |
            ls
            pwd
            cd ./.aws/prod
            ls
            pwd
            terraform apply -auto-approve
      - persist_to_workspace:
          root: .
          paths:
            - .

  plan-destroy-prod:
    working_directory: /tmp/project
    docker:
      - image: 472821558027.dkr.ecr.us-east-1.amazonaws.com/ryan-container-repo:1.3.2
        aws_auth:
          aws_access_key_id: $ECR_AWS_ACCESS_KEY
          aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - run:
          name: terraform create destroy plan - prod
          command: |
            ls
            pwd
            cd ./.aws/prod
            ls
            pwd
            echo "Trying terraform init"
            terraform init -upgrade -input=false
            echo "terraform init successful"
            echo "Trying terraform plan"
            terraform plan -destroy -var-file terraform.tfvars
      - persist_to_workspace:
          root: .
          paths:
            - .

  destroy-prod:
    docker:
      - image: 472821558027.dkr.ecr.us-east-1.amazonaws.com/ryan-container-repo:1.3.2
        aws_auth:
          aws_access_key_id: $ECR_AWS_ACCESS_KEY
          aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    steps:
      - attach_workspace:
          at: .
      - run:
          name: terraform destroy - prod
          command: |
            ls
            pwd
            cd ./.aws/prod
            ls
            pwd
            terraform destroy -auto-approve


  deploy-site-to-dev:
    working_directory: /tmp/project
    docker: 
      - image: 472821558027.dkr.ecr.us-east-1.amazonaws.com/ryan-container-repo:awscli-2.8.6
        aws_auth:
          aws_access_key_id: $ECR_AWS_ACCESS_KEY
          aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - run:
          name: AWS CLI to deploy site - dev
          command: |
            ls
            pwd
            cd site
            ls
            pwd
            aws configure set default.region us-east-1
            aws configure set aws_access_key_id $AWS_ACCESS_KEY
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws s3 sync . s3://ryanaparedes-dev.com
      - persist_to_workspace:
          root: .
          paths:
            - .

  deploy-site-to-prod:
    working_directory: /tmp/project
    docker: 
      - image: 472821558027.dkr.ecr.us-east-1.amazonaws.com/ryan-container-repo:awscli-2.8.6
        aws_auth:
          aws_access_key_id: $ECR_AWS_ACCESS_KEY
          aws_secret_access_key: $ECR_AWS_SECRET_ACCESS_KEY
    steps:
      - checkout
      - run:
          name: AWS CLI to deploy site - prod
          command: |
            ls
            pwd
            cd site
            ls
            pwd
            aws configure set default.region us-east-1
            aws configure set aws_access_key_id $AWS_ACCESS_KEY
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws s3 sync . s3://ryanaparedes.com
      - persist_to_workspace:
          root: .
          paths:
            - .

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  #say-hello-workflow:
  #  jobs:
  #    - say-hello

  plan_approve_apply_dev:
    jobs:
      - plan-apply-dev:
          filters:
            branches:
              only: main
      - hold-apply-dev:
          type: approval
          requires:
            - plan-apply-dev
          filters:
            branches:
              only: main
      - apply-dev:
          requires:
            - hold-apply-dev
          filters:
            branches:
              only: main
      - deploy-site-to-dev:
          requires:
            - apply-dev
          filters:
            branches:
              only: main
            
  plan_approve_destroy_dev:
    jobs:
      - plan-destroy-dev:
          filters:
            branches:
              only: destroy-dev
      - hold-destroy-dev:
          type: approval
          requires:
            - plan-destroy-dev
          filters:
            branches:
              only: destroy-dev
      - destroy-dev:
          requires:
            - hold-destroy-dev
          filters:
            branches:
              only: destroy-dev

  plan_approve_apply_prod:
    jobs:
      - plan-apply-prod:
          filters:
            branches:
              only: main
      - hold-apply-prod:
          type: approval
          requires:
            - plan-apply-prod
          filters:
            branches:
              only: main
      - apply-prod:
          requires:
            - hold-apply-prod
          filters:
            branches:
              only: main
      - deploy-site-to-prod:
          requires:
            - apply-prod
          filters:
            branches:
              only: main
            
  plan_approve_destroy_prod:
    jobs:
      - plan-destroy-prod:
          filters:
            branches:
              only: destroy-prod
      - hold-destroy-prod:
          type: approval
          requires:
            - plan-destroy-prod
          filters:
            branches:
              only: destroy-prod
      - destroy-prod:
          requires:
            - hold-destroy-prod
          filters:
            branches:
              only: destroy-prod

  site_deployment:
    jobs:
      - deploy-site-to-dev:
          filters:
            branches:
              only: main
      - hold-deploy-prod:
          type: approval
          requires:
            - deploy-site-to-dev
          filters:
            branches:
              only: main
      - deploy-site-to-prod:
          requires:
            - hold-deploy-prod
          filters:
            branches:
              only: main
